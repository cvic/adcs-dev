---
import { useTranslations, type Lang } from "@/i18n";
import { getRelativeLocaleUrl } from "astro:i18n";

const t = useTranslations(Astro.currentLocale as Lang);
const locale = Astro.currentLocale as Lang;
---

<div class="alert_important">
  <p>
    <span class="red">
      {
        t({
          en: "IMPORTANT! This is not an emergency request.If the situation is critical, call 911!",
          ro: "IMPORTANT! Acest sistem nu este unul de urgenÈ›Äƒ. DacÄƒ situaÈ›ia este criticÄƒ, apeleazÄƒ 112!",
        })
      }
    </span>
    <button id="more_info_button" class="btn btn-primary test_on_button"> â–¼ {t({
      en: " I agree that I am requesting help from the A.D.C.S. community and that I am not in a critical situation requiring a call to the emergency number 112. I understand that my request may be rejected if it does not fall within the scope of A.D.C.S. activities. I agree that volunteers are not liable for any damages, and that my data (name, phone number, location) will be made available to the community.",
      ro: "Sunt de acord cÄƒ solicit ajutor din partea comunitÄƒÈ›ii A.D.C.S. È™i nu mÄƒ aflu Ã®ntr-o situaÈ›ie criticÄƒ ce impune apelarea numÄƒrului de urgenÈ›Äƒ 112. Sunt de acord ca solicitarea mea poate fi respinsÄƒ dacÄƒ nu intrÄƒ Ã®n aria de activitate a A.D.C.S. Sunt de acord cÄƒ voluntarii sunt exonerati de rÄƒspunderea pentru eventuale daune, iar datele mele (nume, telefon, localizare) vor fi puse la dispoziÈ›ie comunitÄƒÈ›ii.",
    })}</button>
  </p>
</div>

<style>
  .red {
    color: yellow;
    font-size: 1rem;
    font-family: Ubuntu;
    text-align: center;
    padding: 2rem;
  }

  .alert_important {
    background: transparent;
    padding: 1rem;
    display: block;
    box-sizing: border-box;
    width: 100%;
    font-size: 0.9rem;
    text-align: center;
    border-radius: 4px;
  }

  #more_info_button {
    display: block;
  }

  .btn-primary {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 0.5rem 1.25rem;
    border: none;
    border-radius: 0.5rem; /* rounded-2xl vibes */
    background-color: blue;
    color: #fff;
    font-weight: 500;
    font-size: 1rem;
    line-height: 1.5;
    cursor: pointer;
    transition: all 0.2s ease-in-out;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.08);
    margin-top: 2rem;
  }

  .btn-primary:hover {
    background-color: #1d4ed8; /* blue-700 */
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.12);
  }

  .btn-primary:focus {
    outline: 2px solid #3b82f6; /* blue-500 ring */
    outline-offset: 2px;
  }

  .btn-primary:disabled,
  .btn-primary[disabled] {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
  }

  .test_on_button {
    font-size: 0.7rem;
  }
</style>

<script>
  const btn = document.getElementById("more_info_button");
  const comp = document.getElementById("hiddenComponent");

  btn.addEventListener("click", () => {
    if (comp.classList.contains("show")) {
      // fade + slide OUT
      comp.classList.remove("show");
      setTimeout(() => comp.classList.add("hidden"), 500); // wait for transition
    } else {
      // fade + slide IN
      comp.classList.remove("hidden"); // show it instantly, but still opacity 0
      void comp.offsetWidth; // ðŸ”‘ force reflow so CSS transition can start
      comp.classList.add("show"); // now animate opacity 0 â†’ 1 & height 0 â†’ max
    }
  });
</script>
